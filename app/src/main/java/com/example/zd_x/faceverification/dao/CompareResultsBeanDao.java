package com.example.zd_x.faceverification.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.zd_x.faceverification.mvp.model.CompareResultsBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPARE_RESULTS_BEAN".
*/
public class CompareResultsBeanDao extends AbstractDao<CompareResultsBean, Long> {

    public static final String TABLENAME = "COMPARE_RESULTS_BEAN";

    /**
     * Properties of entity CompareResultsBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HistoryId = new Property(1, Long.class, "historyId", false, "HISTORY_ID");
        public final static Property CompareID = new Property(2, String.class, "compareID", false, "COMPARE_ID");
        public final static Property BlacklistID = new Property(3, String.class, "blacklistID", false, "BLACKLIST_ID");
        public final static Property ZfsPath = new Property(4, String.class, "zfsPath", false, "ZFS_PATH");
        public final static Property ImageBase64 = new Property(5, String.class, "imageBase64", false, "IMAGE_BASE64");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(8, long.class, "birthday", false, "BIRTHDAY");
        public final static Property Nation = new Property(9, String.class, "nation", false, "NATION");
        public final static Property Dubious = new Property(10, int.class, "dubious", false, "DUBIOUS");
        public final static Property Note = new Property(11, String.class, "note", false, "NOTE");
        public final static Property Similarity = new Property(12, String.class, "similarity", false, "SIMILARITY");
    }

    private Query<CompareResultsBean> historyVerificationResultModel_CompareResultsQuery;

    public CompareResultsBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CompareResultsBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPARE_RESULTS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HISTORY_ID\" INTEGER," + // 1: historyId
                "\"COMPARE_ID\" TEXT," + // 2: compareID
                "\"BLACKLIST_ID\" TEXT," + // 3: blacklistID
                "\"ZFS_PATH\" TEXT," + // 4: zfsPath
                "\"IMAGE_BASE64\" TEXT," + // 5: imageBase64
                "\"NAME\" TEXT," + // 6: name
                "\"SEX\" TEXT," + // 7: sex
                "\"BIRTHDAY\" INTEGER NOT NULL ," + // 8: birthday
                "\"NATION\" TEXT," + // 9: nation
                "\"DUBIOUS\" INTEGER NOT NULL ," + // 10: dubious
                "\"NOTE\" TEXT," + // 11: note
                "\"SIMILARITY\" TEXT);"); // 12: similarity
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPARE_RESULTS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompareResultsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long historyId = entity.getHistoryId();
        if (historyId != null) {
            stmt.bindLong(2, historyId);
        }
 
        String compareID = entity.getCompareID();
        if (compareID != null) {
            stmt.bindString(3, compareID);
        }
 
        String blacklistID = entity.getBlacklistID();
        if (blacklistID != null) {
            stmt.bindString(4, blacklistID);
        }
 
        String zfsPath = entity.getZfsPath();
        if (zfsPath != null) {
            stmt.bindString(5, zfsPath);
        }
 
        String imageBase64 = entity.getImageBase64();
        if (imageBase64 != null) {
            stmt.bindString(6, imageBase64);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
        stmt.bindLong(9, entity.getBirthday());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(10, nation);
        }
        stmt.bindLong(11, entity.getDubious());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
 
        String similarity = entity.getSimilarity();
        if (similarity != null) {
            stmt.bindString(13, similarity);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompareResultsBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long historyId = entity.getHistoryId();
        if (historyId != null) {
            stmt.bindLong(2, historyId);
        }
 
        String compareID = entity.getCompareID();
        if (compareID != null) {
            stmt.bindString(3, compareID);
        }
 
        String blacklistID = entity.getBlacklistID();
        if (blacklistID != null) {
            stmt.bindString(4, blacklistID);
        }
 
        String zfsPath = entity.getZfsPath();
        if (zfsPath != null) {
            stmt.bindString(5, zfsPath);
        }
 
        String imageBase64 = entity.getImageBase64();
        if (imageBase64 != null) {
            stmt.bindString(6, imageBase64);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
        stmt.bindLong(9, entity.getBirthday());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(10, nation);
        }
        stmt.bindLong(11, entity.getDubious());
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
 
        String similarity = entity.getSimilarity();
        if (similarity != null) {
            stmt.bindString(13, similarity);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompareResultsBean readEntity(Cursor cursor, int offset) {
        CompareResultsBean entity = new CompareResultsBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // historyId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // compareID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blacklistID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // zfsPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imageBase64
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.getLong(offset + 8), // birthday
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nation
            cursor.getInt(offset + 10), // dubious
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // note
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // similarity
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompareResultsBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHistoryId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCompareID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlacklistID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setZfsPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageBase64(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBirthday(cursor.getLong(offset + 8));
        entity.setNation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDubious(cursor.getInt(offset + 10));
        entity.setNote(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSimilarity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompareResultsBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompareResultsBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompareResultsBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "compareResults" to-many relationship of HistoryVerificationResultModel. */
    public List<CompareResultsBean> _queryHistoryVerificationResultModel_CompareResults(Long historyId) {
        synchronized (this) {
            if (historyVerificationResultModel_CompareResultsQuery == null) {
                QueryBuilder<CompareResultsBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.HistoryId.eq(null));
                historyVerificationResultModel_CompareResultsQuery = queryBuilder.build();
            }
        }
        Query<CompareResultsBean> query = historyVerificationResultModel_CompareResultsQuery.forCurrentThread();
        query.setParameter(0, historyId);
        return query.list();
    }

}
